import unittest\nfrom accounts import Account, get_share_price\n\nclass TestAccount(unittest.TestCase):\n    def setUp(self):\n        self.account = Account('test_user', 1000.0)\n\n    def test_initialization(self):\n        self.assertEqual(self.account.username, 'test_user')\n        self.assertEqual(self.account.balance, 1000.0)\n        self.assertEqual(self.account.holdings, {})\n        self.assertEqual(self.account.transactions, [])\n\n    def test_deposit(self):\n        self.account.deposit(500.0)\n        self.assertEqual(self.account.balance, 1500.0)\n        self.assertEqual(self.account.transactions[-1], ('Deposit', 500.0))\n        with self.assertRaises(ValueError):\n            self.account.deposit(-100.0)\n\n    def test_withdraw(self):\n        self.account.withdraw(200.0)\n        self.assertEqual(self.account.balance, 800.0)\n        self.assertEqual(self.account.transactions[-1], ('Withdrawal', 200.0))\n        with self.assertRaises(ValueError):\n            self.account.withdraw(2000.0)\n        with self.assertRaises(ValueError):\n            self.account.withdraw(-50.0)\n\n    def test_buy_shares(self):\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.holdings['AAPL'], 2)\n        self.assertEqual(self.account.balance, 700.0)\n        with self.assertRaises(ValueError):\n            self.account.buy_shares('AAPL', 10)\n\n    def test_sell_shares(self):\n        self.account.buy_shares('AAPL', 2)\n        self.account.sell_shares('AAPL', 1)\n        self.assertEqual(self.account.holdings['AAPL'], 1)\n        self.assertEqual(self.account.balance, 850.0)\n        with self.assertRaises(ValueError):\n            self.account.sell_shares('AAPL', 2)\n\n    def test_get_portfolio_value(self):\n        self.account.deposit(500.0)\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.get_portfolio_value(), 700.0 + get_share_price('AAPL') * 2)\n\n    def test_get_profit_loss(self):\n        self.account.deposit(500.0)\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.get_profit_loss(), self.account.get_portfolio_value() - 1000.0)\n\n    def test_report_holdings(self):\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.report_holdings(), {'AAPL': 2})\n\n    def test_report_profit_loss(self):\n        self.account.deposit(500.0)\n        self.account.buy_shares('AAPL', 2)\n        self.assertEqual(self.account.report_profit_loss(), self.account.get_profit_loss())\n\n    def test_list_transactions(self):\n        self.account.deposit(500.0)\n        self.account.withdraw(200.0)\n        transactions = self.account.list_transactions()\n        self.assertEqual(len(transactions), 2)\n\nif __name__ == '__main__':\n    unittest.main()\n